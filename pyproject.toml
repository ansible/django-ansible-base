[project.urls]
Repository = "https://github.com/ansible/django-ansible-base"

[project]
name = "django-ansible-base"
authors = [
    {name = "Red Hat, Inc.", email = "info@ansible.com"},
    {name = "John Westcott IV", email = "john.westcott.iv@redhat.com"},
]
description = "A Django app used by ansible services"
readme = "README.md"
requires-python = ">=3.9"
keywords = ["ansible", "django"]
license = {text = "Apache-2.0"}
classifiers = [
    "Framework :: Django",
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dynamic = ["version", "dependencies", "optional-dependencies"]

[tool.setuptools.packages.find]
include = ["ansible_base*"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements/requirements.txt"]}
optional-dependencies.all = { file = [
    "requirements/requirements_activitystream.txt",
    "requirements/requirements_authentication.txt",
    "requirements/requirements_api_documentation.txt",
    "requirements/requirements_rest_filters.txt",
    "requirements/requirements_channels.txt",
    "requirements/requirements_jwt_consumer.txt",
    "requirements/requirements_testing.txt",
    "requirements/requirements_redis_client.txt",
    "requirements/requirements_oauth2_provider.txt",
] }
optional-dependencies.activitystream = { file = [ "requirements/requirements_activitystream.txt" ] }
optional-dependencies.authentication = { file = [ "requirements/requirements_authentication.txt" ] }
optional-dependencies.api_documentation = { file = [ "requirements/requirements_api_documentation.txt" ] }
optional-dependencies.rest_filters = { file = [ "requirements/requirements_rest_filters.txt" ] }
optional-dependencies.rbac = { file = [ "requirements/requirements_rbac.txt" ] }
optional-dependencies.channel_auth = { file = [ "requirements/requirements_channels.txt" ] }
optional-dependencies.jwt_consumer = { file = [ "requirements/requirements_jwt_consumer.txt" ] }
optional-dependencies.testing = { file = [ "requirements/requirements_testing.txt" ] }
optional-dependencies.redis_client = { file = [ "requirements/requirements_redis_client.txt" ] }
optional-dependencies.oauth2_provider = { file = [ "requirements/requirements_oauth2_provider.txt" ] }

[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = 'setuptools.build_meta'

[tool.setuptools_scm]
version_scheme = "calver-by-date"

[tool.black]
line-length = 160
fast = true
skip-string-normalization = true
force-exclude = '''
.*/migrations/
'''

[tool.isort]
profile = "black"
line_length = 160
extend_skip = [ "test_app/migrations" ]
skip_glob = [ "ansible_base/*/migrations" ]


[tool.flake8]
max-line-length = 160
extend-ignore = [ "E203" ]
exclude = [ 'ansible_base/*/migrations/*', 'test_app/migrations/*', '.tox', 'build']

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "test_app.settings"
addopts = "--strict-markers --reuse-db --migrations -vvv"

[tool.tox]
legacy_tox_ini = """
    [tox]
    min_version = 4.0
    no_package = true
    env_list =
        check
        py39
        py310
        py311
        py311sqlite
    labels =
        test = py39, py310, py311, py311sqlite, check
        lint = flake8, black, isort

    [testenv]
    deps =
        -r{toxinidir}/requirements/requirements_all.txt
        -r{toxinidir}/requirements/requirements_dev.txt
    allowlist_externals = sh
    commands = sh -c 'make postgres && pytest -n auto --cov=. --cov-report=xml:coverage.xml --cov-report=html --cov-report=json --cov-branch {env:ANSIBLE_BASE_PYTEST_ARGS} {env:ANSIBLE_BASE_TEST_DIRS:test_app/tests} {posargs}'

    [testenv:check]
    deps =
        -r{toxinidir}/requirements/requirements_all.txt
        -r{toxinidir}/requirements/requirements_dev.txt
    commands =
        python3 manage.py check
        python3 manage.py makemigrations --check

    [testenv:py311sqlite]
    setenv =
        DJANGO_SETTINGS_MODULE = test_app.sqlite3settings

    [testenv:flake8]
    deps =
        flake8
        Flake8-pyproject
    commands = flake8 {posargs:.}

    [testenv:black]
    deps =
        black
    allowlist_externals = sh
    commands = sh -c 'black --version && black {posargs:.}'

    [testenv:isort]
    deps =
        isort
    commands = isort {posargs:.}
"""

[tool.coverage.run]
omit = ["test_app/*", "manage.py"]
relative_files = true
